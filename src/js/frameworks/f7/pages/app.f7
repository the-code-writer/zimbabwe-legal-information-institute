<template>

        <div id="app">

            ${$store.getters.loggedIn.value && $h`

            <!-- Left panel with cover effect-->
            <div class="panel panel-left panel-cover panel-init">
                <div class="view">
                    <div class="page">
                        <div class="page-content">

                            <div class="block drawer-header margin-0">
                                <div class="list media-list menu-list no-hairlines margin-0">
                                    <ul class="bg-transparent">
                                        <li>
                                            <a href="#" class="item-content">

                                                ${($store.getters.accountInfo.value.photoURL && $store.getters.accountInfo.value.photoURL !== "" && $store.getters.accountInfo.value.photoURL !== "DEFAULT") ? $h`

                                                <div class="item-media">
                                                    <img src="${$store.getters.accountInfo.value.photoURL}" width="42" style="border-radius: 50%;" />
                                                </div>

                                                ` : $h`

                                                <div class="item-media">
                                                    <i class="icon f7-icons color-white font-size-40px">person_alt_circle</i>
                                                </div>

                                                `}

                                                <div class="item-inner">
                                                    <div class="item-title-wrap">
                                                        <div class="item-title text-color-white">${$store.getters.accountInfo.value.displayName}</div>
                                                    </div>
                                                    <div class="item-subtitle text-color-white">${$store.getters.accountInfo.value.email}</div>
                                                </div>
                                            </a>
                                        </li>
                                    </ul>
                                </div>
                            </div>

                            <div class="list medium-inset no-chevron no-hairline panel-left-drawer-menu-items">
                                <ul>
                                    <li>
                                        <a href="#" class="item-link item-content"  @click=${(e) => openTab(2)} >
                                        <div class="item-media">
                                            <i class="f7-icons text-color-gray font-size-24px">house</i>
                                        </div>
                                        <div class="item-inner">
                                            <div class="item-title">
                                                Home
                                            </div>
                                        </div>
                                        </a>
                                    </li>
                                    <li>
                                        <a href="#" class="item-link item-content"  @click=${(e) => openTab(1)} >
                                        <div class="item-media">
                                            <i class="f7-icons text-color-gray font-size-24px">bell</i>
                                        </div>
                                        <div class="item-inner">
                                            <div class="item-title">
                                                Notifications
                                            </div>
                                        </div>
                                        </a>
                                    </li>
                                    <li>
                                        <a href="#" class="item-link item-content"  @click=${(e) => openTab(3)} >
                                        <div class="item-media">
                                            <i class="f7-icons text-color-gray font-size-24px">book</i>
                                        </div>
                                        <div class="item-inner">
                                            <div class="item-title">
                                                My Collection
                                            </div>
                                        </div>
                                        </a>
                                    </li>
                                    <li>
                                        <a href="#" class="item-link item-content"  @click=${(e) => openTab(3)} >
                                        <div class="item-media">
                                            <i class="f7-icons text-color-gray font-size-24px">building</i>
                                        </div>
                                        <div class="item-inner">
                                            <div class="item-title">
                                                About ZimLII
                                            </div>
                                        </div>
                                        </a>
                                    </li>
                                    <li>
                                        <a href="#" class="item-link item-content"  @click=${(e) => openTab(3)} >
                                        <div class="item-media">
                                            <i class="f7-icons text-color-gray font-size-24px">question_circle</i>
                                        </div>
                                        <div class="item-inner">
                                            <div class="item-title">
                                                Help Centre
                                            </div>
                                        </div>
                                        </a>
                                    </li>
                                    <li>
                                        <a href="#" class="item-link item-content"  @click=${(e) => openTab(3)} >
                                        <div class="item-media">
                                            <i class="f7-icons text-color-gray font-size-24px">gear</i>
                                        </div>
                                        <div class="item-inner">
                                            <div class="item-title">
                                                Settings
                                            </div>
                                        </div>
                                        </a>
                                    </li>
                                    <li>
                                        <a href="#" class="item-link item-content"  @click=${(e) => logOut()} >
                                        <div class="item-media">
                                            <i class="f7-icons text-color-gray font-size-24px">square_arrow_left</i>
                                        </div>
                                        <div class="item-inner">
                                            <div class="item-title">
                                                Sign Out
                                            </div>
                                        </div>
                                        </a>
                                    </li>
                                </ul>
                            </div>

                        </div>
                    </div>
                </div>
            </div>

            <!-- Right panel with reveal effect-->
            <div class="panel panel-right panel-reveal ">
            <div class="view">
                <div class="page">
                    <div class="navbar">
                        <div class="navbar-bg"></div>
                        <div class="navbar-inner">
                            <div class="title">My Account</div>
                        </div>
                    </div>
                    <div class="page-content">
                        <div class="block-title">Account Number: ${$store.getters.userInfo.value.accountNumber}</div>
                        <div class="list no-hairlines-md">
                            <ul>
                                <li>
                                    <div class="item-content item-input">
                                        <div class="item-inner">
                                            <div class="item-title item-label">First Name</div>
                                            <div class="item-input-wrap">
                                                <input type="text" placeholder="Your name" value="${$store.getters.userInfo.value.firstname}" @input="${updateFirstname}" />
                                            </div>
                                        </div>
                                    </div>
                                </li>
                                <li>
                                    <div class="item-content item-input">
                                        <div class="item-inner">
                                            <div class="item-title item-label">last Name</div>
                                            <div class="item-input-wrap">
                                                <input type="text" placeholder="Your name" value="${$store.getters.userInfo.value.lastname}" @input="${updateLastname}" />
                                            </div>
                                        </div>
                                    </div>
                                </li>
                                <li>
                                    <div class="item-content item-input">
                                        <div class="item-inner">
                                            <div class="item-title item-label">E-mail</div>
                                            <div class="item-input-wrap">
                                                <input type="email" placeholder="E-mail" value="${$store.getters.firebaseUserInfo.value.email}" @input="${updateEmail}" />
                                            </div>
                                        </div>
                                    </div>
                                </li>
                                <li>
                                    <div class="item-content item-input">
                                        <div class="item-inner">
                                            <div class="item-title item-label">Phone</div>
                                            <div class="item-input-wrap">
                                                <input type="tel" placeholder="Phone" value="${$store.getters.firebaseUserInfo.value.phoneNumber}" @input="${updatePhoneNumber}" />
                                            </div>
                                        </div>
                                    </div>
                                </li>
                                <li>
                                    <div class="item-content item-input">
                                        <div class="item-inner">
                                            <div class="item-title item-label">Gender</div>
                                            <div class="item-input-wrap">
                                                <select>
                                                    <option>${$store.getters.userInfo.value.gender}</option>
                                                    <option>Male</option>
                                                    <option>Female</option>
                                                </select>
                                            </div>
                                        </div>
                                    </div>
                                </li>
                                <li>
                                    <div class="item-content item-input">
                                        <div class="item-inner">
                                            <div class="item-title item-label">Birth date</div>
                                            <div class="item-input-wrap">
                                                <input type="date" placeholder="Birth day" value="${$store.getters.userInfo.value.dob}" @input="${updateDOB}" />
                                            </div>
                                        </div>
                                    </div>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
            </div>

            <!-- Views/Tabs container -->
            <div class="views tabs safe-areas">

                <!-- Tabbar for switching views-tabs -->
                <div class="toolbar toolbar-bottom tabbar-labels">
                    <div class="toolbar-inner">
                        <a href="#view-judgements" class="tab-link">
                            <i class="icon material-icons">gavel</i>
                            <span class="tabbar-label">Judgments</span>
                        </a>
                        <a href="#view-legislation" class="tab-link">
                            <i class="icon f7-icons if-ios ios-only">book</i>
                            <i class="icon material-icons if-md md-only">local_library</i>
                            <span class="tabbar-label">Legislation</span>
                        </a>
                        <a href="#view-home" class="tab-link tab-link-active" data-tab-index="3">
                                    <span class="centerbutton button button-fill">
                                        <i class="icon f7-icons if-ios ios-only icon-only">house</i>
                                        <i class="material-icons if-md md-only icon-only">home</i>
                                    </span>
                        </a>
                        <a href="#view-gazettes" class="tab-link">
                            <i class="icon f7-icons if-ios ios-only">doc_plaintext</i>
                            <i class="icon material-icons if-md md-only">class</i>
                            <span class="tabbar-label">Gazettes</span>
                        </a>
                        <a href="#view-settings" class="tab-link">
                            <i class="icon f7-icons ios-only if-ios">gear</i>
                            <i class="icon material-icons if-md md-only">tune</i>
                            <span class="tabbar-label">Settings</span>
                        </a>
                    </div>
                </div>

                <!-- Your main view/tab, should have "view-main" class. It also has "tab-active" class -->
                <div id="view-judgements" class="view view-init tab" data-name="judgements" data-url="/judgements/">
                    <!-- Home page will be loaded here dynamically from / route -->
                </div>

                <!-- Catalog View -->
                <div id="view-legislation" class="view view-init tab" data-name="legislation" data-url="/legislation/">
                    <!-- Catalog page will be loaded here dynamically from /catalog/ route -->
                </div>

                <!-- Settings View -->
                <div id="view-home" class="view view-init tab view-main tab-active" data-name="home" data-url="/">
                    <!-- Settings page will be loaded here dynamically from /settings/ route -->
                </div>

                <!-- Settings View -->
                <div id="view-gazettes" class="view view-init tab" data-name="gazettes" data-url="/gazettes/">
                    <!-- Settings page will be loaded here dynamically from /settings/ route -->
                </div>

                <!-- Settings View -->
                <div id="view-settings" class="view view-init tab" data-name="settings" data-url="/settings/">
                    <!-- Settings page will be loaded here dynamically from /settings/ route -->
                </div>

            </div>

            `}

            ${!$store.getters.loggedIn.value && $h`

            <div class="login-screen modal-in">
                <div class="view view-init" id="view-auth" data-url="/auth-sign-in/"></div>
            </div>

            `}

            <div class="popover popover-links-generic">
                <div class="popover-inner">
                    <div class="list">
                        <ul>
                            <li><a class="list-button item-link" href="#">Refresh</a></li>
                            <li><a class="list-button item-link" href="#">Clear</a></li>
                        </ul>
                    </div>
                </div>
            </div>

            </div>

        </template>

<script>

    import sqliteService from '../libs/db.js';

    import { Device } from '@capacitor/device';
    import { Storage } from '@capacitor/storage';

    import { Browser } from '@capacitor/browser';

    import { Filesystem, Directory, Encoding } from '@capacitor/filesystem';

    import { FileDownload } from "capacitor-plugin-filedownload";

    import { Share } from '@capacitor/share';

    window.CapFilesystem = Filesystem;
    window.CapDirectory = Directory;
    window.CapEncoding = Encoding;
    window.CapBrowser = Browser;
    window.CapFileDownload = FileDownload;
    window.CapShare = Share;

// Import the functions you need from the SDKs you need
import konstants from '../libs/constants.js';

import helper from '../libs/helper.js';

import { initializeApp } from "firebase/app";

import { getAuth, onAuthStateChanged, signOut  } from "firebase/auth";

import { FCM } from "@capacitor-community/fcm";

import { PushNotifications } from '@capacitor/push-notifications';

import { StatusBar, Style } from '@capacitor/status-bar';

import { SplashScreen } from '@capacitor/splash-screen';

import { CapFirebaseDynamicLinks } from 'cap-firebase-dynamic-links';

export default (props, {$f7ready, $f7, $f7route, $on, $update, $store}) => {

    let deviceReady = false;

    let loggedIn = $store.getters.loggedIn.value;

    // User account info
    let username = $store.getters.userInfo.value.username;
    let password = $store.getters.userInfo.value.password;

    let userId = $store.getters.userInfo.value.userId;
    let userAccountNumber = $store.getters.userInfo.value.userAccountNumber;

    let firstname = $store.getters.userInfo.value.firstname;
    let lastname = $store.getters.userInfo.value.lastname;
    let dob = $store.getters.userInfo.value.dob;
    let gender = $store.getters.userInfo.value.gender;
    let bio = $store.getters.userInfo.value.bio;
    let roles = $store.getters.userInfo.value.roles;

    // Firebase Data
    let photoURL = $store.getters.firebaseUserInfo.value.photoURL;
    let displayName = $store.getters.firebaseUserInfo.value.displayName;
    let phoneNumber = $store.getters.firebaseUserInfo.value.phoneNumber;
    let email = $store.getters.firebaseUserInfo.value.email;
    let uid = $store.getters.firebaseUserInfo.value.uid;

    $f7.on("INITIALIZE_FIREBASE", function (){

        initializeFirebase();

    });

    $f7.on("FIREBASE_USER_AUTH_STATE_CHANGED", function (user){

        console.log(":: EVENT FIREBASE_USER_AUTH_STATE_CHANGED ::", user);

    });

    $f7.on(konstants.events.device.DEVICE_READY, function ( deviceData ){

        loadSettings( deviceData );

    });

    $f7.on('SAVE_SETTINGS_FORM_UPDATED', function ( settingsData ){

        saveSettings( settingsData, true );

    });

    $f7.on('SAVE_SETTINGS', function ( settingsData ){

        saveSettings( settingsData, false );

    });

    $f7.on('SETTINGS_LOADED', function ( settingsData ){

        refreshedSettings( settingsData, false );

    });

    $f7.on('SETTINGS_SAVED', function ( settingsData ){

        refreshedSettings( settingsData );

    });

    const firebaseConfig = {
        apiKey: "AIzaSyAzxxQUByaDXUd-vX00Nebucz5wPOeDexw",
        authDomain: "zimlii-org.firebaseapp.com",
        projectId: "zimlii-org",
        storageBucket: "zimlii-org.appspot.com",
        messagingSenderId: "611024240423",
        appId: "1:611024240423:web:7492f3d5861791986fb302",
        measurementId: "G-W60M9SX7ZC"
    };


    const initDB = async function(){

        console.log(":: >>> INIT DB::");

        let _data0 = await sqliteService.databaseStartup();
        let _data1 = await sqliteService.createFile('qwfwefw','wefwefw','ewfwefwefw');
        let _data2 = await sqliteService.loadFileData();

        console.log(":: >>> ::", _data0,  _data1, _data2);

    };

    const downloadPDF = ( fileArray ) => {

        $f7.preloader.hide();

        $f7.dialog.close();

        $f7.dialog.progress('Downloading PDF');

        const path = fileArray.category+'/'+fileArray.letter+'/'+fileArray.slug;

        const file = fileArray.slug + '.pdf';

        const fullPath = path + '/' +  file;

        CapFileDownload.addListener(
            'downloadProgress',
            function (FileDownloadProgress) {

                console.log("::downloadPDF:**********:PROGRESS:", FileDownloadProgress);

            });

        CapFileDownload.download({
            uri: fileArray.url,
            fileName: fullPath
        }).then((res) => {

            console.log("::downloadPDF:0:SUCCESS:", res.path);

            $f7.preloader.hide();

            $f7.dialog.close();

            Share.share({
                title: 'Open or Share PDF',
                text: fileArray.title + '.pdf',
                url: res.path,
                dialogTitle: 'Share with buddies',
            });

            $f7.emit("INSERT_FILE_INTO_DB", [fileArray.title, fullPath, Math.floor(Date.now() / 1000)])

        }).catch(err => {

            console.log("::downloadPDF:0:ERROR:", err);

            $f7.preloader.hide();

        });

    }

    const searchJudgements2 = () => {

    }

    const refreshedSettings = (settingsData) => {

        console.log(":: SETTINGS REFRESHED ::", ($store.getters.settings.value === settingsData), $store.getters.settings.value);

        if(settingsData === null){

            saveSettings({
                    allow_push_notifications: ['on'],
                    auto_lock: [],
                    currency: "USD",
                    enable_2fa: [],
                    enable_dark_theme: [],
                    show_balances: ['on'],
                },
                false
            );

        }

        validateSettings(settingsData);

    };

    const saveSettings = (settingsData, silenceEmitter) => {

        if(typeof settingsData === "object") {

            console.log(":: SAVE SETTINGS FUNCTION :: CALL EMITTER ::", !silenceEmitter, settingsData);

            $store.dispatch('setSettings', settingsData);

            if(silenceEmitter) {

                validateSettings(settingsData);

            }else{

                $f7.emit("SETTINGS_SAVED", settingsData);

            }

        }

    };

    const loadSettings = ( deviceData ) => {

        $store.dispatch('restoreSettings', function (settingsData) {

            if(typeof settingsData === "object") {

                $f7.emit("SETTINGS_LOADED", settingsData);

                $f7.emit("SETTINGS_FILL_IN_FORM", settingsData);

                $f7.form.fillFromData('#app-settings-form', settingsData);

            }

        });

    };

    const validateSettings = (settingsData) => {

        const _settings = $store.getters.settings.value;

        const isWeb = true;

        console.table([_settings]);

        if(typeof _settings === 'object') {

            if(!isWeb) {

                // Display content under transparent status bar (Android only)
                StatusBar.setOverlaysWebView({overlay: true});

                $f7.statusbar.show();

            }

            if ('enable_dark_theme' in settingsData) {

                if (settingsData.enable_dark_theme) {

                    console.warn(":: SETTINGS :: enable_dark_theme ::",(settingsData.enable_dark_theme[0] === 'on'),  settingsData.enable_dark_theme);

                    if ((settingsData.enable_dark_theme.length) > 0 && (settingsData.enable_dark_theme[0] === 'on')) {

                        $('html').addClass('theme-dark');

                        if (!isWeb) {

                            StatusBar.setStyle({style: Style.Dark});

                            StatusBar.setBackgroundColor({color: '#000000'});

                        }

                    } else {

                        $('html').removeClass('theme-dark');

                        if(!isWeb) {

                            StatusBar.setStyle({style: Style.Dark});

                            StatusBar.setBackgroundColor({color: '#04a8f2'});

                        }

                    }

                }

            } else {

                if(!isWeb) {

                    StatusBar.setStyle({style: Style.Dark});

                    StatusBar.setBackgroundColor({color: '#04a8f2'});

                }

            }

        }

        return false;

    };

    const initializeFirebase =  () => {

        const firebaseApp = initializeApp(firebaseConfig);

        // Initialize Firebase
        $f7.params.apps.firebase = firebaseApp;

        $f7.emit("FIREBASE_READY", firebaseApp);

        const auth = getAuth(firebaseApp);

        onAuthStateChanged(auth, (user) => {
            if (user) {
                // User is signed in, see docs for a list of available properties
                // https://firebase.google.com/docs/reference/js/firebase.User
                const firebaseUserData = {
                    displayName: user.displayName,
                    email: user.email,
                    phoneNumber: user.phoneNumber,
                    photoURL: user.photoURL,
                    uid: user.uid,
                    providerId: user.providerData[0].providerId,
                };

                $f7.emit("FIREBASE_USER_SIGN_IN", firebaseUserData);

                $f7.emit("FIREBASE_USER_AUTH_STATE_CHANGED", firebaseUserData);

                $store.dispatch('setFirebaseUserData', firebaseUserData);

                $store.dispatch('setLoggedIn', true);

                // ...
            } else {
                // User is signed out
                // ...
                const firebaseUserData = {
                    displayName: "",
                    email: "",
                    phoneNumber: "",
                    photoURL: "",
                    uid: "",
                    providerId: "",
                };

                $f7.emit("FIREBASE_USER_SIGN_OUT", false);

                $f7.emit("FIREBASE_USER_AUTH_STATE_CHANGED", false);

                $store.dispatch('setFirebaseUserData', firebaseUserData);

                $store.dispatch('setLoggedIn', false);

            }
        });

        let deviceInfo = $store.getters.deviceInfo.value;

        console.log(":: PUSH NOTIFICATIONS ::", deviceInfo);

        if( deviceInfo.platform !== "web") {

            //initializeFirebaseCloudMessaging();

            //initializePushNotifications();

        }

        $update();

    };


    const initializeFirebaseCloudMessaging = async () => {

        // external required step
        // register for push
        await PushNotifications.requestPermissions();
        await PushNotifications.register();

        // Get FCM token instead the APN one returned by Capacitor
        FCM.getToken()
            .then((r) => {

                console.log(":: SAVE GOOGLE FCM TOKEN ::", r.token);

                $store.dispatch('setFirebaseCloudMessagingToken', r.token);

                $store.dispatch('setServerFirebaseCloudMessagingToken', r.token);

                $f7.on("SUBSCRIBE_TO_CHANNELS", ( channels ) => {

                    for (const [key, value] of Object.entries(channels)) {

                        FCM.subscribeTo({ topic: value })
                            .then((r) => {
                                console.log(":: Subscribed to topic ::", key, value);
                            })
                            .catch((err) => console.log(":: Error subscribing to topic ::", err));

                    }

                });

            })
            .catch((err) => console.log(err));

    };

    const initializePushNotifications = async () => {

        // Request permission to use push notifications
        // iOS will prompt user and return if they granted permission or not
        // Android will just grant without prompting
        PushNotifications.requestPermissions().then(result => {
            if (result.receive === 'granted') {
                // Register with Apple / Google to receive push via APNS/FCM
                PushNotifications.register();
            } else {
                // Show some error
            }
        });

        //Types are not supported b the current Javascript version

        PushNotifications.addListener('registration', (token) => {
            alert('Push registration success, token: ' + token.value);
        });

        PushNotifications.addListener('registrationError', (error) => {
            alert('Error on registration: ' + JSON.stringify(error));
        });

        PushNotifications.addListener(
            'pushNotificationReceived',
            (notification) => {
                alert('Push received: ' + JSON.stringify(notification));
            },
        );

        PushNotifications.addListener(
            'pushNotificationActionPerformed',
            (notification) => {
                alert('Push action performed: ' + JSON.stringify(notification));
            },
        );

    };


    const initializeBiometric = () => {

        // Check if biometrics are available and which type is supported
        NativeBiometric.isAvailable().then(
            (result) => {

                if (result.isAvailable) {

                    // Get user's credentials
                    NativeBiometric.getCredentials({
                        server: $f7.params.id,
                    }).then((credentials) => {

                        const biometricData = {
                            credentials: credentials,
                            biometryType: result.biometryType,
                        };

                        $store.dispatch('setBiometricIsReady', true);

                        $store.dispatch('setBiometricType', result.biometryType);

                        //TODO: delete credentials key ONLY on production

                        $f7.emit("BIOMETRIC_READY", biometricData);

                        $update();

                    });

                }
            },
            (error) => {
                // Couldn't check availability
            }
        );

        $update();

    };

    const updateUserInfo = (data) => {

        console.log("::UPDATE USER DATA ::", data);

        $store.dispatch('addUserInfo', data);

        $update();

    };

    const updateFirebaseUserInfo = (data) => {

        console.log("::UPDATE FIREBASE USER DATA ::", data);

        $store.dispatch('addFirebaseUserInfo', data);

        $update();

    };

    const updateUsername = (e) => {
        username = e.target.value;
        $update();
    };

    const updatePassword = (e) => {
        password = e.target.value;
        $update();
    };

    const updateFirstname = (e) => {
        firstname = e.target.value;
        displayName = firstname + " " + lastname;
        $update();
    };

    const updateLastname = (e) => {
        lastname = e.target.value;
        displayName = firstname + " " + lastname;
        $update();
    };

    const updateEmail = (e) => {
        email = e.target.value;
        $update();
    };

    const updatePhoneNumber = (e) => {
        phoneNumber = e.target.value;
        $update();
    };

    const updateDOB = (e) => {
        dob = e.target.value;
        $update();
    };

    const updateBIO = (e) => {
        bio = e.target.value;
        $update();
    };

    const openView = (path) => {

    };

    const openTab = (num) => {

    };

    const addEventListeners = () => {

        $f7.on("HTTP_ERROR", function ( errors ) {

            httpError( errors );

        });

        CapFirebaseDynamicLinks.addListener('onDynamicLink', function (data) {

            console.log(":: DYNMIC LINK CLICKED ::", data);

        });

    };

    const setUp = () => {

        const devicePrivateKey = $store.getters.devicePrivateKey.value;

        const devicePublicKey = $store.getters.devicePublicKey.value;

        addEventListeners();

        if(!devicePrivateKey) {

            $store.dispatch('restoreDevicePrivateKey', function ( privateKey ) {

                /*

                console.log(":: RESTORING PRIVATE KEY ::", privateKey,
                    [privateKey, $store.getters.devicePrivateKey.value, $store.getters.devicePublicKey.value,
                        [(privateKey === null), (!privateKey), (typeof privateKey === "undefined"), (privateKey === "undefined")]
                    ]
                );

                */

                if( !privateKey || typeof privateKey === "undefined" || privateKey === "undefined"){

                    helper.encryption.generateKeyPair(
                        function(key){

                            // now you get the JWK public and private keys
                            const privateKey = key.privateKey;
                            const publicKey = key.publicKey;

                            $store.dispatch('setDevicePrivateKey', privateKey);

                            $store.dispatch('saveDevicePrivateKey', function (saveDevicePrivateKeyResult) {

                                $store.dispatch('setDevicePublicKey', publicKey);

                                $store.dispatch('saveDevicePublicKey', function (saveDevicePublicKeyResult) {

                                    //console.log(":: SETUP :: DISPATCH ::  saveDevicePrivateKeyResult, saveDevicePublicKeyResult ::", saveDevicePrivateKeyResult, saveDevicePublicKeyResult);

                                    setUp();

                                });

                            });

                        },
                        function (error) {

                            console.log(":: ERROR GENERATING KEY PAIR::", error);

                        },
                        1024
                    );


                }else{

                    setUp();

                }

            });

        } else {

            if(!devicePublicKey) {

                $store.dispatch('restoreDevicePublicKey', function (publicKey) {

                    $store.dispatch('setDevicePublicKey', publicKey);

                    $store.dispatch('saveDevicePublicKey', function (saveDevicePublicKeyResult) {

                        setUp();

                    });

                });

            }else{

                console.log(" :: DEVICE KEY PAIR LOADED SUCCESSFULLY ::", [devicePrivateKey, devicePublicKey]);

                initializeFirebase();

                //initializeBiometric();

            }

        }

    };

    const logOut = () => {

        // Destroy server session
        // $store.dispatch('authSignOut', false);

        // Logout firebase
        signOut(getAuth($f7.params.apps.firebase));

    };

    let toastWithButton;

    const showToastWithButton = (message, callbackFunction) => {
        // Create toast
        if (message) {
            toastWithButton = $f7.toast.create({
                text: message,
                closeButton: true,
                closeButtonText: 'Close',
                closeButtonColor: 'red',
                on: {
                    close: function () {
                        if(typeof callbackFunction === "function"){
                            callbackFunction();
                        }
                    },
                }
            });
            // Open it
            toastWithButton.open();
        }
    };

    const httpError = (error) => {

        $store.dispatch('setIsSigningIn', false);

        $store.dispatch('setIsSigningUp', false);

        if(error.hasOwnProperty('error')){

            error = error.error;

        }

        let error_code = 0;

        if('code' in error){

            error_code = error.code;

        } else {

            error_code = error.status;

        }

        console.error(":: HTTP_ERROR ::", error);

        switch(error_code){

            case 500: {

                showToastWithButton('The server encountered an unexpected condition which prevented it from fulfilling the request. Please contact the systems administrator for assistance.');

                break;

            }

            case 500: {

                showToastWithButton('The server is currently unable to handle the request due to a temporary overloading or maintenance of the server.');

                break;

            }

            case 400: {

                if( typeof error.response === "object" && error.response.hasOwnProperty('messages') && error.response.messages !== ""){

                    let errorsHtml = '<ul>';

                    for(let i in error.response.messages){

                        errorsHtml += '<li>' + error.response.messages[i] + '</li>';

                    }

                    errorsHtml += '</ul>';

                    showToastWithButton('Please correct the following errors<br>'+errorsHtml);

                }else{

                    showToastWithButton("<h3>Bad Request</h3> The request could not be understood by the server due to malformed syntax.");

                }

                break;

            }

            case 401 : {

                showToastWithButton("<h3>Unauthorized</h3> The requested resource requires user authentication.");
                break;

            }

            case 402 : {

                showToastWithButton("<h3>Payment Required</h3> The requested resource requires a payment.");
                break;

            }

            case 403 : {

                showToastWithButton("<h3>Forbidden</h3> The requested resource could not fulfill your request due to reason known to it.");
                break;

            }

            case 404 : {

                showToastWithButton("<h3>Not Found</h3> The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent.");
                break;

            }

            case 0: {

                if( typeof error.response === "object" && error.response.hasOwnProperty('messages') && error.response.messages !== ""){

                    showToastWithButton("<h3>"+error.message+"</h3>"+error.response.error_description);

                }else{

                    showToastWithButton("<h3>Network Error</h3> Connection to the server could not be established. Please try again later");

                }

                break;

            }

            default : {

                showToastWithButton(`<h3>Unknown Error</h3> There was an error (Error: ${error_code}) while trying to process your request. Please contact your administrator for assistance.`);
                break;

            }

        }

    };

    $f7ready( function() {

        // now it is safe to call Framework7 APIs

    });

    $on('pageInit', (e, page) => {

        console.log(":: PAGE INIT ::", e, page);

        console.log('page init');

        $f7.on("INSERT_FILE_INTO_DB", function (fileArray){
            sqliteService.createFile(fileArray[0],fileArray[1],fileArray[2]);
        });

        $f7.on("DOWNLOAD_PDF", function (fileArray){
            downloadPDF(fileArray);
        });

        //initDB();

        if(!deviceReady){

            helper.device.getDeviceData(function (deviceData) {

                deviceData.data.raw = $f7.params.device;

                deviceData.hasOwnProperty('key')  ? $store.dispatch('setDeviceKey',  deviceData.key)  : null;

                deviceData.hasOwnProperty('data') ? $store.dispatch('setDeviceInfo', deviceData.data) : null;

                deviceReady = true;

                $f7.emit(konstants.events.device.DEVICE_READY, deviceData);

                let _deviceData = $store.getters.deviceInfo.value;

                let _deviceKey = $store.getters.deviceKey.value;

                $f7.name = _deviceData.name;
                $f7.params.name = _deviceData.name;

                $f7.id = _deviceData.id;
                $f7.params.id = _deviceData.id;

                $f7.build = _deviceData.build;
                $f7.params.build = _deviceData.build;

                $f7.version = _deviceData.version;
                $f7.params.version = _deviceData.version;

                console.log(":: DISPATCH DEVICE READY EVENT ::", [$f7.id , $f7.params.id , _deviceData.id], _deviceData, _deviceKey);

                setUp();

                $update();

            });

        }

        // trigger re-render
        $update();

    });

    $on('pageMounted', (e, page) => {
        console.log('page mounted ***');
        $f7.preloader.show();
    });
    $on('pageBeforeIn', (e, page) => {
        console.log('page before in');
    });
    $on('pageAfterIn', (e, page) => {
        console.log('page after in ***');
        $f7.preloader.hide();

        $(".tab-link").on("click", function(e){

            let historyPages = $f7.views.current.history;
            if(historyPages.length > 1) {

                return  $f7.views.current.router.back();

            }
        })

    });
    $on('pageBeforeOut', (e, page) => {
        console.log('page before out');
    });
    $on('pageAfterOut', (e, page) => {
        console.log('page after out');
    });
    $on('pageBeforeUnmount', (e, page) => {
        console.log('page before unmount');
    });
    $on('pageBeforeRemove', (e, page) => {
        console.log('page before remove');
    });

    return $render;

}
</script>
