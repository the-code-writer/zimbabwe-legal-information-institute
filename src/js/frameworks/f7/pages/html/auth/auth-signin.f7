<template>
    <div class="page no-navbar no-toolbar no-swipeback">
        <div class="page-content login-screen-content">
            <div class="login-screen-title">
                <img style="width: 58vw; max-width: 240px; margin: auto;" src="${imagesLogoUrl}"/>
            </div>
            <div class="login-screen-title">
                Log in
            </div>
            <form>
                <div class="block list">
                    <ul>
                        <li class="item-content item-input item-input-outline">
                            <div class="item-inner">
                                <div class="item-title item-floating-label">Username / Email</div>
                                <div class="item-input-wrap">
                                    <input type="text" placeholder="Enter your username / email"
                                           @input="${updateSignInUsername}"/>
                                    <span class="input-clear-button"></span>
                                </div>
                            </div>
                        </li>
                        <li class="item-content item-input item-input-outline">
                            <div class="item-inner">
                                <div class="item-title item-floating-label">Password</div>
                                <div class="item-input-wrap">
                                    <input type="${showPasswordText ? 'text' : 'password' }" placeholder="Your password"
                                           @input="${updateSignInPassword}"/>

                                    ${ password.length > 3 && $h`

                                    ${ !showPasswordText ? $h`

                                    <span class="input-show-password-button" @click=${showPassword}>
										<i class="f7-icons">eye</i>
									</span>

                                    ` : $h`

                                    <span class="input-show-password-button" @click=${hidePassword}>
										<i class="f7-icons">eye_slash</i>
									</span>

                                    `}

                                    `}

                                </div>
                            </div>
                        </li>
                    </ul>
                </div>
                <div class="block">
                    <div class="block">
                        <a href="#"
                           class="button button-large button-fill button-preloader ${$store.getters.isSigningIn.value ? 'button-loading' : ''}"
                           @click=${signIn}
                        >
                            <span class="preloader"></span>
                            <span>Sign In</span>
                        </a>
                    </div>
                </div>

                <div class="list">

                    <div class="block-footer">
                        <p>
                            Click <a href="/auth/sign-up/" class="link ">here</a> to register an account
                        </p>
                        <p>
                        <ul>
                            <li>
                                <a href="#" class="list-button" @click=${forgotPassword}>Forgot Password</a>
                            </li>
                        </ul>
                        </p>
                    </div>

                    ${$store.getters.getFirebaseIsReady.value && $h`

                    <div class="block-footer">
                        <p>
                        <ul>
                            <li>
                                <a href="#" class="list-button" @click=${signInWithSocialTrigger}>Sign In with a social
                                    account</a>
                            </li>
                        </ul>
                        </p>
                    </div>

                    `}

                    ${$store.getters.getBiometricIsReady.value && $h`

                    <div class="block-footer">
                        <p>
                        <ul>
                            <li>
                                <a href="#" class="list-button" @click=${signInWithBiometric}>
                                    <i class="icon material-icons" style="font-size: 48px">fingerprint</i>
                                </a>
                            </li>
                        </ul>
                        </p>
                    </div>

                    `}

                </div>
            </form>
        </div>


        <div class="sheet-modal sheet-swipe-to-close-sign-in-with-social" style="height:auto;">
            <div class="sheet-modal-inner">
                <div class="page-content">
                    <div class="block-title block-title-medium">Social Account Sign In</div>
                    <div class="block">
                        <p>
                            <b>Save time by signing in with a social account.</b>
                        </p>
                    </div>
                    <div class="block">
                        <div class="list media-list">
                            <ul>
                                ${ socialAccountsArray.map((item, index) => $h`
                                <li>
                                    <a href="#" class="item-link item-content" @click=${(e) =>
                                    signInWithSocialAccount(item)} >
                                    <div class="item-media">
                                                <span>
                                                    <i class="f7-icons" style="color: ${item.color} !important;">${item.icon}</i>
                                                </span>
                                    </div>
                                    <div class="item-inner">
                                        <div class="item-title-row no-chevron">
                                            <div class="item-title">
                                                Sign in with <span>${item.title}</span>
                                            </div>
                                        </div>
                                    </div>
                                    </a>
                                </li>
                                `)}
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="sheet-modal sheet-swipe-to-close-sign-in-with-social-ui" style="height:auto;">
            <div class="sheet-modal-inner">
                <div class="page-content">
                    <div class="block-title block-title-medium">Social Account Sign In</div>
                    <div class="block">
                        <p>
                            <b>Save time by signing in with a social account.</b>
                        </p>
                    </div>
                    <div class="block">
                        <div class="list media-list" id="firebaseui-auth-container">

                        </div>
                    </div>
                </div>
            </div>
        </div>

    </div>
</template>
<script>

    import {NativeBiometric, BiometryType} from "capacitor-native-biometric";

    import {
        getAuth,
        setPersistence,
        browserSessionPersistence,
        browserLocalPersistence,
        signInWithEmailAndPassword,
        getRedirectResult,
        signInWithRedirect,
        signInWithPopup,
        GoogleAuthProvider,
        TwitterAuthProvider,
        FacebookAuthProvider,
        GithubAuthProvider
    } from "firebase/auth";

    import { FirebaseAuthentication } from '@robingenz/capacitor-firebase-authentication';

    window.FirebaseAuthentication = FirebaseAuthentication;

    export default (props, {$f7ready, $f7, $f7route, $on, $update, $store}) => {

        let imagesLogoUrl = $f7.params.assets.images.logo;

        let isSigningIn = $store.getters.isSigningIn.value;

        let hasAccessToken = $store.getters.hasAccessToken.value;

        let clientAccessToken = $store.getters.clientAccessToken.value;

        let clientAccessTokenpayload = $store.getters.clientAccessTokenPayload.value;

        let clientRefreshToken = $store.getters.clientRefreshToken.value;

        let clientId = $store.getters.clientId.value;

        let clientSecret = $store.getters.clientSecret.value;

        let grantType = $store.getters.grantType.value;

        let deviceInfo = $store.getters.deviceInfo.value;

        let username = '';

        let password = '';

        let showPasswordText = false;

        let signInWithSocialAccountSheetModal;

        const showPassword = function (e) {
            showPasswordText = true;
            $update();
        };

        const hidePassword = function (e) {
            showPasswordText = false;
            $update();
        };

        let socialAccountsArray = [
            {
                title: "Google",
                icon: "logo_google",
                image: "assets/png/logos/google.png",
                provider: "GOOGLE",
                id: "google",
                domain: "google.com",
                color: "#f44336"
            },
            {
                title: "Facebook",
                icon: "logo_facebook",
                image: "assets/png/logos/facebook.png",
                provider: "FACEBOOK",
                id: "facebook",
                domain: "facebook.com",
                color: "#3f51b5"
            },
            {
                title: "Twitter",
                icon: "logo_twitter",
                image: "assets/png/logos/twitter.png",
                provider: "TWITTER",
                id: "twitter",
                domain: "twitter.com",
                color: "#2196f3"
            },
            {
                title: "Microsoft",
                icon: "logo_windows",
                image: "assets/png/logos/microsoft.png",
                provider: "MICROSOFT",
                id: "microsoft",
                domain: "microsoft.com",
                color: "#03a9f4"
            },
            {
                title: "Apple",
                icon: "logo_apple",
                image: "assets/png/logos/apple.png",
                provider: "APPLE",
                id: "apple",
                domain: "apple.com",
                color: "#121212"
            },
        ];

        const updateSignInUsername = function (e) {
            username = e.target.value;
            $update();
        };

        const updateSignInPassword = function (e) {
            password = e.target.value;
            $update();
        };

        const forgotPassword = function () {

        };

        const signInWithSocialTrigger = function () {

            signInWithSocialAccountSheetModal.open();

        };

        const signIn = (deviceClentRegistrationDataResult) => {

            $store.dispatch('setIsSigningIn', true);

            console.log(":: SIGNING IN WITH DATA PARAMS ::", deviceClentRegistrationDataResult);

            // Check clientID and clientSecret

            console.log(":: SIGNING >> DO WE HAVE THE CLIENT ID && CLIENT SECRET ::", ($store.getters.clientId.value !== false && $store.getters.clientSecret.value !== false), [$store.getters.clientId.value, $store.getters.clientSecret.value]);

            if ($store.getters.clientId.value !== false && $store.getters.clientSecret.value !== false) {

                // Check Client Token
                if ($store.getters.clientToken.value !== false) {

                    // Client Token is available

                    // Proceed to Login

                    // Get the Access Token

                    getClientAccessToken(
                        // Login

                        function (clientAccessToken) {

                            getClientAccessTokenSuccess(username, password, clientAccessToken);

                        },

                        // It could be a network error

                        // Show error

                        function (error) {

                            $f7.emit("HTTP_ERROR", error);

                        }
                    );

                } else {

                    // Send Request to Server

                    // Needs [clientId, clientSecret, clientToken, grantType];

                    registerClientOnServer(
                        function (deviceClentRegistrationDataResult) {

                            //At least we now have the clientId and clientSecret

                            console.log(":: REGISTER CLIENT :: deviceClentRegistrationDataResult ::", deviceClentRegistrationDataResult);

                            signIn(deviceClentRegistrationDataResult);

                        },
                        function (error) {

                            // Error while regisering he client

                            // It could be the network error

                            // registerClientOnServerError

                            $f7.emit("HTTP_ERROR", error);

                        },
                    );
                }

            } else {

                // Send Request to Server

                registerClientOnServer(
                    function (deviceClentRegistrationDataResult) {

                        //At least we now have the clientId and clientSecret

                        console.log(":: REGISTER CLIENT :: deviceClentRegistrationDataResult ::", deviceClentRegistrationDataResult);

                        signIn(deviceClentRegistrationDataResult);

                    },
                    function (error) {

                        // Error while regisering he client

                        // It could be the network error

                        // registerClientOnServerError

                        $f7.emit("HTTP_ERROR", error);

                    },
                );

            }

        };

        // ALIAS OF LOGIN SUCCESS

        const getClientAccessTokenSuccess = (username, password, payload) => {

            $store.dispatch('setIsSigningIn', false);

            console.log(":: GET CLIENT ACCESS TOKEN RESULT :: clientAccessToken ::", username, password, payload);

            // Check if biometrics are available and which type is supported
            NativeBiometric.isAvailable().then(
                (result) => {

                    if (result.isAvailable) {

                        // Save user's credentials
                        NativeBiometric.setCredentials({
                            username: username,
                            password: password,
                            server: $f7.params.id,
                        }).then();

                    }

                });

        };

        const registerClientOnServer = (callbackSuccess, callbackError) => {

            const data = {
                deviceInfo: $store.getters.deviceInfo.value,
                callbackSuccess: function (result) {
                    callbackSuccess(result);
                },
                callbackError: function (error) {
                    callbackError(error);
                }
            };

            $store.dispatch('ajaxRegisterClient', data);

        };

        let toastWithButton;

        const showToastWithButton = (message) => {
            // Create toast
            if (!toastWithButton) {
                toastWithButton = $f7.toast.create({
                    text: message,
                    closeButton: true,
                });
            }
            // Open it
            toastWithButton.open();
        };

        const getClientAccessToken = (callbackSuccess, callbackError) => {

            const data = {
                clientID: $store.getters.clientId.value,
                clientSecret: $store.getters.clientSecret.value,
                username: username,
                password: password,
                grantType: $store.getters.grantType.value,
                clientToken: $store.getters.clientToken.value,
                callbackSuccess: function (result) {
                    callbackSuccess(result);
                },
                callbackError: function (error) {
                    callbackError(error);
                }
            };

            console.log(":: LOGIN :: REQUEST ACCESS TOKEN ::", data);

            $store.dispatch('ajaxGetAccessToken', data);

        };

        const signInWithSocialAccount = async (provider) => {

            console.log(":: SIGN IN WITH SOCIAL ACCOUNT ::", provider);

            const auth = getAuth($f7.params.apps.firebase);

            await setPersistence(auth, browserLocalPersistence);

            switch (provider.id) {

                case "google" : {
                    signInWithSocialAccountGoogle();
                    break;
                }

                default : {

                    break;

                }

            }

            signInWithSocialAccountSheetModal.close();

        };

        const signInWithSocialAccountGoogle = () => {

            FirebaseAuthentication.signInWithGoogle().then(function(user) {
                console.warn(":::::::>>>>>>>>>>>> UUUUUUSER ::::", user);
                signInWithSocialAccountGoogleX();
            }).catch(function(error) {
                console.error(":::::::>>>>>>>>>>>> ERRRRRROR ::::", error);
                signInWithSocialAccountGoogleX();
            })

            $store.dispatch("setLoggedIn", true);


        };

        const signInWithSocialAccountGoogleX = () => {

            const auth = getAuth($f7.params.apps.firebase);

            const provider = new GoogleAuthProvider();

            signInWithRedirect(auth, provider)
                .then(() => {
                    return getRedirectResult(auth);
                })
                .then((result) => {

                    // This gives you a Google Access Token. You can use it to access Google APIs.
                    const credential = GoogleAuthProvider.credentialFromResult(result);

                    const token = credential.accessToken;

                    // The signed-in user info.
                    const user = result.user;

                    console.log(":: SOCIAL SIGN IN SUCCESS :: GOOGLE ::", token, user);

                    newFirebaseGoogleUser(user);

                }).catch((error) => {
                // Handle Errors here.

                const errorCode = error.code;
                const errorMessage = error.message;
                // The email of the user's account used.
                const email = error.email;
                // The AuthCredential type that was used.
                const credential = GoogleAuthProvider.credentialFromError(error);
                // ...

                console.log(":: SOCIAL SIGN IN ERROR :: GOOGLE ::", errorCode, errorMessage, email, credential);

            });

        };

        const signInWithEmailAndPassword = (email, password) => {

            const auth = getAuth($f7.params.apps.firebase);

            signInWithEmailAndPassword(auth, email, password)
                .then((userCredential) => {
                    // Signed in
                    const user = userCredential.user;
                    // ...
                    newFirebaseGoogleUser(user);
                })
                .catch((error) => {
                    const errorCode = error.code;
                    const errorMessage = error.message;
                });

        };

        const newFirebaseGoogleUser = (user) => {

            const firebaseUserData = {
                displayName: user.displayName,
                email: user.email,
                phoneNumber: user.phoneNumber,
                photoURL: user.photoURL,
                uid: user.uid,
                providerId: user.providerData[0].providerId,
            };

            $f7.emit("FIREBASE_USER_SIGN_IN_WITH_PROVIDER", firebaseUserData);

            console.log(":: GOT A FIREBASE USER FROM A PROVIDER::", user.providerData[0].providerId, firebaseUserData);

            $store.dispatch('setFirebaseUserData', firebaseUserData);

        };

        const firebaseRenderUI = () => {


            const auth = getAuth($f7.params.apps.firebase);

            // Initialize the FirebaseUI Widget using Firebase.
            var ui = new firebaseui.auth.AuthUI(auth);

            ui.start('#firebaseui-auth-container', {
                signInOptions: [
                    {
                        provider: GoogleAuthProvider.PROVIDER_ID,
                        scopes: [
                            'https://www.googleapis.com/auth/contacts.readonly'
                        ],
                        customParameters: {
                            // Forces account selection even when one account
                            // is available.
                            prompt: 'select_account'
                        }
                    },
                    {
                        provider: firebase.auth.FacebookAuthProvider.PROVIDER_ID,
                        scopes: [
                            'public_profile',
                            'email',
                            'user_likes',
                            'user_friends'
                        ],
                        customParameters: {
                            // Forces password re-entry.
                            auth_type: 'reauthenticate'
                        }
                    },
                    firebase.auth.TwitterAuthProvider.PROVIDER_ID, // Twitter does not support scopes.
                    firebase.auth.EmailAuthProvider.PROVIDER_ID // Other providers don't need to be given as object.
                ]
            });


        };

        const signInWithBiometric = () => {

            console.log(":: SIGN IN WITH BIOMETRIC ::");

            // Check if biometrics are available and which type is supported
            NativeBiometric.isAvailable().then(
                (result) => {

                    if (result.isAvailable) {
                        // Get user's credentials
                        NativeBiometric.getCredentials({
                            server: $f7.params.id,
                        }).then((credentials) => {
                            // Authenticate using biometrics before logging the user in
                            NativeBiometric.verifyIdentity({
                                reason: `Enable Biometric Authentication to allow quick login on the *${$f7.params.name}* app`,
                                title: "Log in",
                                subtitle: $f7.params.name,
                                description: "Maybe a description too?",
                            }).then(
                                () => {
                                    // Authentication successful
                                    username = credentials.username;

                                    //$store.dispatch('setUsername', credentials.username);

                                    password = credentials.password;

                                    //$store.dispatch('setUserPassword', credentials.password);

                                },
                                (error) => {
                                    // Failed to authenticate
                                    console.warn(":: BIOMETRIC :: FAILED TO AUTHENTICATE ::", error);
                                }
                            );
                        });
                    }
                },
                (error) => {
                    // Couldn't check availability
                    console.warn(":: BIOMETRIC :: COULD NOT CHECK AVAILABILITY ::", error);
                }
            );

        };

        $f7ready(() => {

            //

        });

        $on('pageInit', () => {

            signInWithSocialAccountSheetModal = $f7.sheet.create({
                el: '.sheet-swipe-to-close-sign-in-with-social',
                swipeToClose: true,
                backdrop: true,
            });

            $f7.on("FIREBASE_READY", function (firebaseApp) {

                $store.dispatch('setFirebaseIsReady', true);

                console.log(":: EVENT FIREBASE_READY ::", firebaseApp);

                $update();

            });

            $f7.on("BIOMETRIC_READY", function (biometricCredentials) {

                $store.dispatch('setBiometricIsReady', true);

                console.log(":: EVENT BIOMETRIC_READY ::", biometricCredentials);

                $update();

            });

            // trigger re-render
            $update();

        });

        $on('pageMounted', (e, page) => {
            console.log('page mounted');
        });
        $on('pageBeforeIn', (e, page) => {
            console.log('page before in');
        });
        $on('pageAfterIn', (e, page) => {
            console.log('page after in');
        });
        $on('pageBeforeOut', (e, page) => {
            console.log('page before out');
        });
        $on('pageAfterOut', (e, page) => {
            console.log('page after out');
        });
        $on('pageBeforeUnmount', (e, page) => {
            console.log('page before unmount');
        });
        $on('pageBeforeRemove', (e, page) => {
            console.log('page before remove');
        });

        return $render;

    }
</script>
