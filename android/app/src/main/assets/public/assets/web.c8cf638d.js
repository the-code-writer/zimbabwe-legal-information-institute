import{W as r}from"./vendor.766e96b7.js";class o extends r{constructor(){super(...arguments);this.sqliteEl=null,this.isStoreOpen=!1}async initWebStore(){return await customElements.whenDefined("jeep-sqlite"),this.sqliteEl=document.querySelector("jeep-sqlite"),this.sqliteEl!=null?(this.sqliteEl.addEventListener("jeepSqliteImportProgress",t=>{this.notifyListeners("sqliteImportProgressEvent",t.detail)}),this.sqliteEl.addEventListener("jeepSqliteExportProgress",t=>{this.notifyListeners("sqliteExportProgressEvent",t.detail)}),this.isStoreOpen||(this.isStoreOpen=await this.sqliteEl.isStoreOpen()),Promise.resolve()):Promise.reject("InitWeb: this.sqliteEl is null")}async saveToStore(t){if(this.sqliteEl!=null)if(this.isStoreOpen)try{return await this.sqliteEl.saveToStore(t),Promise.resolve()}catch(e){return Promise.reject(`${e}`)}else return Promise.reject('Store "jeepSqliteStore" failed to open');else throw this.unimplemented("Not implemented on web.")}async echo(t){if(this.sqliteEl!=null)return await this.sqliteEl.echo(t);throw this.unimplemented("Not implemented on web.")}async isSecretStored(){throw this.unimplemented("Not implemented on web.")}async setEncryptionSecret(t){throw console.log("setEncryptionSecret",t),this.unimplemented("Not implemented on web.")}async changeEncryptionSecret(t){throw console.log("changeEncryptionSecret",t),this.unimplemented("Not implemented on web.")}async createConnection(t){if(this.sqliteEl!=null)if(this.isStoreOpen)try{return await this.sqliteEl.createConnection(t),Promise.resolve()}catch(e){return Promise.reject(`${e}`)}else return Promise.reject('Store "jeepSqliteStore" failed to open');else throw this.unimplemented("Not implemented on web.")}async open(t){if(this.sqliteEl!=null)if(this.isStoreOpen)try{return await this.sqliteEl.open(t),Promise.resolve()}catch(e){return Promise.reject(`${e}`)}else return Promise.reject('Store "jeepSqliteStore" failed to open');else throw this.unimplemented("Not implemented on web.")}async closeConnection(t){if(this.sqliteEl!=null)if(this.isStoreOpen)try{return await this.sqliteEl.closeConnection(t),Promise.resolve()}catch(e){return Promise.reject(`${e}`)}else return Promise.reject('Store "jeepSqliteStore" failed to open');else throw this.unimplemented("Not implemented on web.")}async getVersion(t){if(this.sqliteEl!=null)if(this.isStoreOpen)try{const e=await this.sqliteEl.getVersion(t);return Promise.resolve(e)}catch(e){return Promise.reject(`${e}`)}else return Promise.reject('Store "jeepSqliteStore" failed to open');else throw this.unimplemented("Not implemented on web.")}async checkConnectionsConsistency(t){if(this.sqliteEl!=null)try{const e=await this.sqliteEl.checkConnectionsConsistency(t);return Promise.resolve(e)}catch(e){return Promise.reject(`${e}`)}else throw this.unimplemented("Not implemented on web.")}async close(t){if(this.sqliteEl!=null)if(this.isStoreOpen)try{return await this.sqliteEl.close(t),Promise.resolve()}catch(e){return Promise.reject(`${e}`)}else return Promise.reject('Store "jeepSqliteStore" failed to open');else throw this.unimplemented("Not implemented on web.")}async execute(t){if(this.sqliteEl!=null)if(this.isStoreOpen)try{const e=await this.sqliteEl.execute(t);return Promise.resolve(e)}catch(e){return Promise.reject(`${e}`)}else return Promise.reject('Store "jeepSqliteStore" failed to open');else throw this.unimplemented("Not implemented on web.")}async executeSet(t){if(this.sqliteEl!=null)if(this.isStoreOpen)try{const e=await this.sqliteEl.executeSet(t);return Promise.resolve(e)}catch(e){return Promise.reject(`${e}`)}else return Promise.reject('Store "jeepSqliteStore" failed to open');else throw this.unimplemented("Not implemented on web.")}async run(t){if(this.sqliteEl!=null)if(this.isStoreOpen)try{const e=await this.sqliteEl.run(t);return Promise.resolve(e)}catch(e){return Promise.reject(`${e}`)}else return Promise.reject('Store "jeepSqliteStore" failed to open');else throw this.unimplemented("Not implemented on web.")}async query(t){if(this.sqliteEl!=null)if(this.isStoreOpen)try{const e=await this.sqliteEl.query(t);return Promise.resolve(e)}catch(e){return Promise.reject(`${e}`)}else return Promise.reject('Store "jeepSqliteStore" failed to open');else throw this.unimplemented("Not implemented on web.")}async isDBExists(t){if(this.sqliteEl!=null)if(this.isStoreOpen)try{const e=await this.sqliteEl.isDBExists(t);return Promise.resolve(e)}catch(e){return Promise.reject(`${e}`)}else return Promise.reject('Store "jeepSqliteStore" failed to open');else throw this.unimplemented("Not implemented on web.")}async isDBOpen(t){if(this.sqliteEl!=null)if(this.isStoreOpen)try{const e=await this.sqliteEl.isDBOpen(t);return Promise.resolve(e)}catch(e){return Promise.reject(`${e}`)}else return Promise.reject('Store "jeepSqliteStore" failed to open');else throw this.unimplemented("Not implemented on web.")}async isDatabase(t){if(this.sqliteEl!=null)if(this.isStoreOpen||(this.isStoreOpen=await this.sqliteEl.isStoreOpen()),this.isStoreOpen)try{const e=await this.sqliteEl.isDatabase(t);return Promise.resolve(e)}catch(e){return Promise.reject(`${e}`)}else return Promise.reject('Store "jeepSqliteStore" failed to open');else throw this.unimplemented("Not implemented on web.")}async isTableExists(t){if(this.sqliteEl!=null)if(this.isStoreOpen)try{const e=await this.sqliteEl.isTableExists(t);return Promise.resolve(e)}catch(e){return Promise.reject(`${e}`)}else return Promise.reject('Store "jeepSqliteStore" failed to open');else throw this.unimplemented("Not implemented on web.")}async deleteDatabase(t){if(this.sqliteEl!=null)if(this.isStoreOpen)try{return await this.sqliteEl.deleteDatabase(t),Promise.resolve()}catch(e){return Promise.reject(`${e}`)}else return Promise.reject('Store "jeepSqliteStore" failed to open');else throw this.unimplemented("Not implemented on web.")}async isJsonValid(t){if(this.sqliteEl!=null)if(this.isStoreOpen||(this.isStoreOpen=await this.sqliteEl.isStoreOpen()),this.isStoreOpen)try{const e=await this.sqliteEl.isJsonValid(t);return Promise.resolve(e)}catch(e){return Promise.reject(`${e}`)}else return Promise.reject('Store "jeepSqliteStore" failed to open');else throw this.unimplemented("Not implemented on web.")}async importFromJson(t){if(this.sqliteEl!=null)if(this.isStoreOpen||(this.isStoreOpen=await this.sqliteEl.isStoreOpen()),this.isStoreOpen)try{const e=await this.sqliteEl.importFromJson(t);return Promise.resolve(e)}catch(e){return Promise.reject(`${e}`)}else return Promise.reject('Store "jeepSqliteStore" failed to open');else throw this.unimplemented("Not implemented on web.")}async exportToJson(t){if(this.sqliteEl!=null)if(this.isStoreOpen)try{const e=await this.sqliteEl.exportToJson(t);return Promise.resolve(e)}catch(e){return Promise.reject(`${e}`)}else return Promise.reject('Store "jeepSqliteStore" failed to open');else throw this.unimplemented("Not implemented on web.")}async createSyncTable(t){if(this.sqliteEl!=null)if(this.isStoreOpen)try{const e=await this.sqliteEl.createSyncTable(t);return Promise.resolve(e)}catch(e){return Promise.reject(`${e}`)}else return Promise.reject('Store "jeepSqliteStore" failed to open');else throw this.unimplemented("Not implemented on web.")}async setSyncDate(t){if(this.sqliteEl!=null)if(this.isStoreOpen)try{return await this.sqliteEl.setSyncDate(t),Promise.resolve()}catch(e){return Promise.reject(`${e}`)}else return Promise.reject('Store "jeepSqliteStore" failed to open');else throw this.unimplemented("Not implemented on web.")}async getSyncDate(t){if(this.sqliteEl!=null)if(this.isStoreOpen)try{const e=await this.sqliteEl.getSyncDate(t);return Promise.resolve(e)}catch(e){return Promise.reject(`${e}`)}else return Promise.reject('Store "jeepSqliteStore" failed to open');else throw this.unimplemented("Not implemented on web.")}async addUpgradeStatement(t){if(this.sqliteEl!=null)if(this.isStoreOpen)try{return await this.sqliteEl.addUpgradeStatement(t),Promise.resolve()}catch(e){return Promise.reject(`${e}`)}else return Promise.reject('Store "jeepSqliteStore" failed to open');else throw this.unimplemented("Not implemented on web.")}async copyFromAssets(t){if(this.sqliteEl!=null)if(this.isStoreOpen)try{return await this.sqliteEl.copyFromAssets(t),Promise.resolve()}catch(e){return Promise.reject(`${e}`)}else return Promise.reject('Store "jeepSqliteStore" failed to open');else throw this.unimplemented("Not implemented on web.")}async getDatabaseList(){if(this.sqliteEl!=null)if(this.isStoreOpen||(this.isStoreOpen=await this.sqliteEl.isStoreOpen()),this.isStoreOpen)try{const t=await this.sqliteEl.getDatabaseList();return Promise.resolve(t)}catch(t){return Promise.reject(`${t}`)}else return Promise.reject('Store "jeepSqliteStore" failed to open');else throw this.unimplemented("Not implemented on web.")}async getMigratableDbList(t){throw console.log("getMigratableDbList",t),this.unimplemented("Not implemented on web.")}async addSQLiteSuffix(t){throw console.log("addSQLiteSuffix",t),this.unimplemented("Not implemented on web.")}async deleteOldDatabases(t){throw console.log("deleteOldDatabases",t),this.unimplemented("Not implemented on web.")}}export{o as CapacitorSQLiteWeb};
