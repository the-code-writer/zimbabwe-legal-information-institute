import {
  WebPlugin
} from "./chunk-WOGWUFZV.js";
import "./chunk-ELXAK55F.js";

// node_modules/@capacitor-community/sqlite/dist/esm/web.js
var CapacitorSQLiteWeb = class extends WebPlugin {
  constructor() {
    super(...arguments);
    this.sqliteEl = null;
    this.isStoreOpen = false;
  }
  async initWebStore() {
    await customElements.whenDefined("jeep-sqlite");
    this.sqliteEl = document.querySelector("jeep-sqlite");
    if (this.sqliteEl != null) {
      this.sqliteEl.addEventListener("jeepSqliteImportProgress", (event) => {
        this.notifyListeners("sqliteImportProgressEvent", event.detail);
      });
      this.sqliteEl.addEventListener("jeepSqliteExportProgress", (event) => {
        this.notifyListeners("sqliteExportProgressEvent", event.detail);
      });
      if (!this.isStoreOpen)
        this.isStoreOpen = await this.sqliteEl.isStoreOpen();
      return Promise.resolve();
    } else {
      return Promise.reject("InitWeb: this.sqliteEl is null");
    }
  }
  async saveToStore(options) {
    if (this.sqliteEl != null) {
      if (this.isStoreOpen) {
        try {
          await this.sqliteEl.saveToStore(options);
          return Promise.resolve();
        } catch (err) {
          return Promise.reject(`${err}`);
        }
      } else {
        return Promise.reject(`Store "jeepSqliteStore" failed to open`);
      }
    } else {
      throw this.unimplemented("Not implemented on web.");
    }
  }
  async echo(options) {
    if (this.sqliteEl != null) {
      const echo = await this.sqliteEl.echo(options);
      return echo;
    } else {
      throw this.unimplemented("Not implemented on web.");
    }
  }
  async isSecretStored() {
    throw this.unimplemented("Not implemented on web.");
  }
  async setEncryptionSecret(options) {
    console.log("setEncryptionSecret", options);
    throw this.unimplemented("Not implemented on web.");
  }
  async changeEncryptionSecret(options) {
    console.log("changeEncryptionSecret", options);
    throw this.unimplemented("Not implemented on web.");
  }
  async createConnection(options) {
    if (this.sqliteEl != null) {
      if (this.isStoreOpen) {
        try {
          await this.sqliteEl.createConnection(options);
          return Promise.resolve();
        } catch (err) {
          return Promise.reject(`${err}`);
        }
      } else {
        return Promise.reject(`Store "jeepSqliteStore" failed to open`);
      }
    } else {
      throw this.unimplemented("Not implemented on web.");
    }
  }
  async open(options) {
    if (this.sqliteEl != null) {
      if (this.isStoreOpen) {
        try {
          await this.sqliteEl.open(options);
          return Promise.resolve();
        } catch (err) {
          return Promise.reject(`${err}`);
        }
      } else {
        return Promise.reject(`Store "jeepSqliteStore" failed to open`);
      }
    } else {
      throw this.unimplemented("Not implemented on web.");
    }
  }
  async closeConnection(options) {
    if (this.sqliteEl != null) {
      if (this.isStoreOpen) {
        try {
          await this.sqliteEl.closeConnection(options);
          return Promise.resolve();
        } catch (err) {
          return Promise.reject(`${err}`);
        }
      } else {
        return Promise.reject(`Store "jeepSqliteStore" failed to open`);
      }
    } else {
      throw this.unimplemented("Not implemented on web.");
    }
  }
  async getVersion(options) {
    if (this.sqliteEl != null) {
      if (this.isStoreOpen) {
        try {
          const ret = await this.sqliteEl.getVersion(options);
          return Promise.resolve(ret);
        } catch (err) {
          return Promise.reject(`${err}`);
        }
      } else {
        return Promise.reject(`Store "jeepSqliteStore" failed to open`);
      }
    } else {
      throw this.unimplemented("Not implemented on web.");
    }
  }
  async checkConnectionsConsistency(options) {
    if (this.sqliteEl != null) {
      try {
        const ret = await this.sqliteEl.checkConnectionsConsistency(options);
        return Promise.resolve(ret);
      } catch (err) {
        return Promise.reject(`${err}`);
      }
    } else {
      throw this.unimplemented("Not implemented on web.");
    }
  }
  async close(options) {
    if (this.sqliteEl != null) {
      if (this.isStoreOpen) {
        try {
          await this.sqliteEl.close(options);
          return Promise.resolve();
        } catch (err) {
          return Promise.reject(`${err}`);
        }
      } else {
        return Promise.reject(`Store "jeepSqliteStore" failed to open`);
      }
    } else {
      throw this.unimplemented("Not implemented on web.");
    }
  }
  async execute(options) {
    if (this.sqliteEl != null) {
      if (this.isStoreOpen) {
        try {
          const ret = await this.sqliteEl.execute(options);
          return Promise.resolve(ret);
        } catch (err) {
          return Promise.reject(`${err}`);
        }
      } else {
        return Promise.reject(`Store "jeepSqliteStore" failed to open`);
      }
    } else {
      throw this.unimplemented("Not implemented on web.");
    }
  }
  async executeSet(options) {
    if (this.sqliteEl != null) {
      if (this.isStoreOpen) {
        try {
          const ret = await this.sqliteEl.executeSet(options);
          return Promise.resolve(ret);
        } catch (err) {
          return Promise.reject(`${err}`);
        }
      } else {
        return Promise.reject(`Store "jeepSqliteStore" failed to open`);
      }
    } else {
      throw this.unimplemented("Not implemented on web.");
    }
  }
  async run(options) {
    if (this.sqliteEl != null) {
      if (this.isStoreOpen) {
        try {
          const ret = await this.sqliteEl.run(options);
          return Promise.resolve(ret);
        } catch (err) {
          return Promise.reject(`${err}`);
        }
      } else {
        return Promise.reject(`Store "jeepSqliteStore" failed to open`);
      }
    } else {
      throw this.unimplemented("Not implemented on web.");
    }
  }
  async query(options) {
    if (this.sqliteEl != null) {
      if (this.isStoreOpen) {
        try {
          const ret = await this.sqliteEl.query(options);
          return Promise.resolve(ret);
        } catch (err) {
          return Promise.reject(`${err}`);
        }
      } else {
        return Promise.reject(`Store "jeepSqliteStore" failed to open`);
      }
    } else {
      throw this.unimplemented("Not implemented on web.");
    }
  }
  async isDBExists(options) {
    if (this.sqliteEl != null) {
      if (this.isStoreOpen) {
        try {
          const ret = await this.sqliteEl.isDBExists(options);
          return Promise.resolve(ret);
        } catch (err) {
          return Promise.reject(`${err}`);
        }
      } else {
        return Promise.reject(`Store "jeepSqliteStore" failed to open`);
      }
    } else {
      throw this.unimplemented("Not implemented on web.");
    }
  }
  async isDBOpen(options) {
    if (this.sqliteEl != null) {
      if (this.isStoreOpen) {
        try {
          const ret = await this.sqliteEl.isDBOpen(options);
          return Promise.resolve(ret);
        } catch (err) {
          return Promise.reject(`${err}`);
        }
      } else {
        return Promise.reject(`Store "jeepSqliteStore" failed to open`);
      }
    } else {
      throw this.unimplemented("Not implemented on web.");
    }
  }
  async isDatabase(options) {
    if (this.sqliteEl != null) {
      if (!this.isStoreOpen)
        this.isStoreOpen = await this.sqliteEl.isStoreOpen();
      if (this.isStoreOpen) {
        try {
          const ret = await this.sqliteEl.isDatabase(options);
          return Promise.resolve(ret);
        } catch (err) {
          return Promise.reject(`${err}`);
        }
      } else {
        return Promise.reject(`Store "jeepSqliteStore" failed to open`);
      }
    } else {
      throw this.unimplemented("Not implemented on web.");
    }
  }
  async isTableExists(options) {
    if (this.sqliteEl != null) {
      if (this.isStoreOpen) {
        try {
          const ret = await this.sqliteEl.isTableExists(options);
          return Promise.resolve(ret);
        } catch (err) {
          return Promise.reject(`${err}`);
        }
      } else {
        return Promise.reject(`Store "jeepSqliteStore" failed to open`);
      }
    } else {
      throw this.unimplemented("Not implemented on web.");
    }
  }
  async deleteDatabase(options) {
    if (this.sqliteEl != null) {
      if (this.isStoreOpen) {
        try {
          await this.sqliteEl.deleteDatabase(options);
          return Promise.resolve();
        } catch (err) {
          return Promise.reject(`${err}`);
        }
      } else {
        return Promise.reject(`Store "jeepSqliteStore" failed to open`);
      }
    } else {
      throw this.unimplemented("Not implemented on web.");
    }
  }
  async isJsonValid(options) {
    if (this.sqliteEl != null) {
      if (!this.isStoreOpen)
        this.isStoreOpen = await this.sqliteEl.isStoreOpen();
      if (this.isStoreOpen) {
        try {
          const ret = await this.sqliteEl.isJsonValid(options);
          return Promise.resolve(ret);
        } catch (err) {
          return Promise.reject(`${err}`);
        }
      } else {
        return Promise.reject(`Store "jeepSqliteStore" failed to open`);
      }
    } else {
      throw this.unimplemented("Not implemented on web.");
    }
  }
  async importFromJson(options) {
    if (this.sqliteEl != null) {
      if (!this.isStoreOpen)
        this.isStoreOpen = await this.sqliteEl.isStoreOpen();
      if (this.isStoreOpen) {
        try {
          const ret = await this.sqliteEl.importFromJson(options);
          return Promise.resolve(ret);
        } catch (err) {
          return Promise.reject(`${err}`);
        }
      } else {
        return Promise.reject(`Store "jeepSqliteStore" failed to open`);
      }
    } else {
      throw this.unimplemented("Not implemented on web.");
    }
  }
  async exportToJson(options) {
    if (this.sqliteEl != null) {
      if (this.isStoreOpen) {
        try {
          const ret = await this.sqliteEl.exportToJson(options);
          return Promise.resolve(ret);
        } catch (err) {
          return Promise.reject(`${err}`);
        }
      } else {
        return Promise.reject(`Store "jeepSqliteStore" failed to open`);
      }
    } else {
      throw this.unimplemented("Not implemented on web.");
    }
  }
  async createSyncTable(options) {
    if (this.sqliteEl != null) {
      if (this.isStoreOpen) {
        try {
          const ret = await this.sqliteEl.createSyncTable(options);
          return Promise.resolve(ret);
        } catch (err) {
          return Promise.reject(`${err}`);
        }
      } else {
        return Promise.reject(`Store "jeepSqliteStore" failed to open`);
      }
    } else {
      throw this.unimplemented("Not implemented on web.");
    }
  }
  async setSyncDate(options) {
    if (this.sqliteEl != null) {
      if (this.isStoreOpen) {
        try {
          await this.sqliteEl.setSyncDate(options);
          return Promise.resolve();
        } catch (err) {
          return Promise.reject(`${err}`);
        }
      } else {
        return Promise.reject(`Store "jeepSqliteStore" failed to open`);
      }
    } else {
      throw this.unimplemented("Not implemented on web.");
    }
  }
  async getSyncDate(options) {
    if (this.sqliteEl != null) {
      if (this.isStoreOpen) {
        try {
          const ret = await this.sqliteEl.getSyncDate(options);
          return Promise.resolve(ret);
        } catch (err) {
          return Promise.reject(`${err}`);
        }
      } else {
        return Promise.reject(`Store "jeepSqliteStore" failed to open`);
      }
    } else {
      throw this.unimplemented("Not implemented on web.");
    }
  }
  async addUpgradeStatement(options) {
    if (this.sqliteEl != null) {
      if (this.isStoreOpen) {
        try {
          await this.sqliteEl.addUpgradeStatement(options);
          return Promise.resolve();
        } catch (err) {
          return Promise.reject(`${err}`);
        }
      } else {
        return Promise.reject(`Store "jeepSqliteStore" failed to open`);
      }
    } else {
      throw this.unimplemented("Not implemented on web.");
    }
  }
  async copyFromAssets(options) {
    if (this.sqliteEl != null) {
      if (this.isStoreOpen) {
        try {
          await this.sqliteEl.copyFromAssets(options);
          return Promise.resolve();
        } catch (err) {
          return Promise.reject(`${err}`);
        }
      } else {
        return Promise.reject(`Store "jeepSqliteStore" failed to open`);
      }
    } else {
      throw this.unimplemented("Not implemented on web.");
    }
  }
  async getDatabaseList() {
    if (this.sqliteEl != null) {
      if (!this.isStoreOpen)
        this.isStoreOpen = await this.sqliteEl.isStoreOpen();
      if (this.isStoreOpen) {
        try {
          const ret = await this.sqliteEl.getDatabaseList();
          return Promise.resolve(ret);
        } catch (err) {
          return Promise.reject(`${err}`);
        }
      } else {
        return Promise.reject(`Store "jeepSqliteStore" failed to open`);
      }
    } else {
      throw this.unimplemented("Not implemented on web.");
    }
  }
  async getMigratableDbList(options) {
    console.log("getMigratableDbList", options);
    throw this.unimplemented("Not implemented on web.");
  }
  async addSQLiteSuffix(options) {
    console.log("addSQLiteSuffix", options);
    throw this.unimplemented("Not implemented on web.");
  }
  async deleteOldDatabases(options) {
    console.log("deleteOldDatabases", options);
    throw this.unimplemented("Not implemented on web.");
  }
};
export {
  CapacitorSQLiteWeb
};
//# sourceMappingURL=web-P6FKQBAQ.js.map
