(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = global || self, factory(global.StorageManagerJs = {}));
}(this, (function (exports) { 'use strict';

  function _typeof(obj) {
    "@babel/helpers - typeof";

    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  var map = function map(object, callback) {
    try {
      Object.keys(object).forEach(callback);
    } catch (error) {
      window.console.log(error);
    }
  };
  var isNil = function isNil(item) {
    return item === null || item === undefined;
  };
  var isPrimitive = function isPrimitive(a) {
    var type = _typeof(a);

    return a === "string" || a === "number" || a === "boolean" || isNil(a);
  };

  var fnDate = function fnDate(str) {
    var date = new Date();
    return typeof str === "number" ? new Date(date * 1 + str * 864e5) : str;
  };

  var zeroEpoch = "1969-12-31T23:59:59.000Z";
  var Cookie = {
    has: function has(key) {
      return document.cookie.split(";").some(function (item) {
        return item.trim().startsWith(key + "=");
      });
    },
    json: function json() {
      var cookie = document.cookie;

      if (cookie === "") {
        return {};
      }

      return document.cookie.split("; ").map(function (v) {
        return v.split("=");
      }).reduce(function (acc, v) {
        acc[decodeURIComponent(v[0].trim())] = decodeURIComponent(v[1].trim());
        return acc;
      }, {});
    },
    deleteAll: function deleteAll() {
      document.cookie.split(";").forEach(function (cookie) {
        document.cookie = cookie.replace(/^ +/, "").replace(/=.*/, "=;expires=" + new Date().toUTCString() + ";path=/");
      });
    },
    get: function get(key) {
      var value = Cookie.json()[key];

      if (isNil(value)) {
        return null;
      }

      try {
        return JSON.parse(decodeURIComponent(value));
      } catch (error) {
        return value;
      }
    },
    "delete": function _delete(key) {
      document.cookie = encodeURIComponent(key) + "=;expires=" + new Date().toUTCString();
    },
    set: function set(key, object, _a) {
      var _b = _a === void 0 ? {} : _a,
          _c = _b.expires,
          expires = _c === void 0 ? zeroEpoch : _c,
          _d = _b.path,
          path = _d === void 0 ? "/" : _d,
          _e = _b.sameSite,
          sameSite = _e === void 0 ? "strict" : _e,
          _f = _b.useSecure,
          useSecure = _f === void 0 ? true : _f;

      var secure = useSecure ? ";secure" : ";";
      var exp = fnDate(expires);
      var value = isPrimitive(object) ? object : encodeURIComponent(JSON.stringify(object));
      var samesite = sameSite === "" ? "" : sameSite + ";";
      document.cookie = encodeURIComponent(key) + "=" + value + ";path=" + path + ";expires=" + exp + ";" + samesite + secure;
    }
  };

  var LocalStorage = {
    has: function has(key) {
      var item = window.localStorage.getItem(key);
      return !isNil(item);
    },
    json: function json() {
      return window.localStorage;
    },
    deleteAll: function deleteAll() {
      map(window.localStorage, LocalStorage["delete"]);
    },
    get: function get(key) {
      var str = window.localStorage.getItem(key);

      try {
        return JSON.parse(str);
      } catch (error) {
        return str;
      }
    },
    "delete": function _delete(key) {
      window.localStorage.removeItem(key);
    },
    set: function set(key, object) {
      window.localStorage.setItem(key, JSON.stringify(object));
    }
  };

  var SessionStorage = {
    has: function has(key) {
      return !isNil(window.sessionStorage.getItem(key));
    },
    json: function json() {
      return window.sessionStorage;
    },
    deleteAll: function deleteAll() {
      map(window.sessionStorage, SessionStorage["delete"]);
    },
    get: function get(key) {
      var str = window.sessionStorage.getItem(key);

      try {
        return JSON.parse(str);
      } catch (error) {
        return str;
      }
    },
    "delete": function _delete(key) {
      window.sessionStorage.removeItem(key);
    },
    set: function set(key, object) {
      window.sessionStorage.setItem(key, JSON.stringify(object));
    }
  };

  exports.Cookie = Cookie;
  exports.LocalStorage = LocalStorage;
  exports.SessionStorage = SessionStorage;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
