import { WebPlugin } from '@capacitor/core';
import type { CapacitorSQLitePlugin, capEchoOptions, capSQLiteOptions, capSQLiteExecuteOptions, capSQLiteSetOptions, capSQLiteRunOptions, capSQLiteQueryOptions, capSQLiteImportOptions, capSQLiteExportOptions, capSQLiteSyncDateOptions, capSQLiteUpgradeOptions, capSQLiteTableOptions, capSQLitePathOptions, capEchoResult, capVersionResult, capSQLiteResult, capSQLiteChanges, capSQLiteValues, capSQLiteJson, capSQLiteSyncDate, capAllConnectionsOptions, capSetSecretOptions, capChangeSecretOptions, capSQLiteFromAssetsOptions } from './definitions';
export declare class CapacitorSQLiteWeb extends WebPlugin implements CapacitorSQLitePlugin {
    private sqliteEl;
    private isStoreOpen;
    initWebStore(): Promise<void>;
    saveToStore(options: capSQLiteOptions): Promise<void>;
    echo(options: capEchoOptions): Promise<capEchoResult>;
    isSecretStored(): Promise<capSQLiteResult>;
    setEncryptionSecret(options: capSetSecretOptions): Promise<void>;
    changeEncryptionSecret(options: capChangeSecretOptions): Promise<void>;
    createConnection(options: capSQLiteOptions): Promise<void>;
    open(options: capSQLiteOptions): Promise<void>;
    closeConnection(options: capSQLiteOptions): Promise<void>;
    getVersion(options: capSQLiteOptions): Promise<capVersionResult>;
    checkConnectionsConsistency(options: capAllConnectionsOptions): Promise<capSQLiteResult>;
    close(options: capSQLiteOptions): Promise<void>;
    execute(options: capSQLiteExecuteOptions): Promise<capSQLiteChanges>;
    executeSet(options: capSQLiteSetOptions): Promise<capSQLiteChanges>;
    run(options: capSQLiteRunOptions): Promise<capSQLiteChanges>;
    query(options: capSQLiteQueryOptions): Promise<capSQLiteValues>;
    isDBExists(options: capSQLiteOptions): Promise<capSQLiteResult>;
    isDBOpen(options: capSQLiteOptions): Promise<capSQLiteResult>;
    isDatabase(options: capSQLiteOptions): Promise<capSQLiteResult>;
    isTableExists(options: capSQLiteTableOptions): Promise<capSQLiteResult>;
    deleteDatabase(options: capSQLiteOptions): Promise<void>;
    isJsonValid(options: capSQLiteImportOptions): Promise<capSQLiteResult>;
    importFromJson(options: capSQLiteImportOptions): Promise<capSQLiteChanges>;
    exportToJson(options: capSQLiteExportOptions): Promise<capSQLiteJson>;
    createSyncTable(options: capSQLiteOptions): Promise<capSQLiteChanges>;
    setSyncDate(options: capSQLiteSyncDateOptions): Promise<void>;
    getSyncDate(options: capSQLiteOptions): Promise<capSQLiteSyncDate>;
    addUpgradeStatement(options: capSQLiteUpgradeOptions): Promise<void>;
    copyFromAssets(options: capSQLiteFromAssetsOptions): Promise<void>;
    getDatabaseList(): Promise<capSQLiteValues>;
    getMigratableDbList(options: capSQLitePathOptions): Promise<capSQLiteValues>;
    addSQLiteSuffix(options: capSQLitePathOptions): Promise<void>;
    deleteOldDatabases(options: capSQLitePathOptions): Promise<void>;
}
