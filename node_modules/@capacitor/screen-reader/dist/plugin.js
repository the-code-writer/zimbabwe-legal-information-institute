var capacitorScreenReader = (function (exports, core) {
    'use strict';

    const ScreenReader = core.registerPlugin('ScreenReader', {
        web: () => Promise.resolve().then(function () { return web; }).then(m => new m.ScreenReaderWeb()),
    });

    class ScreenReaderWeb extends core.WebPlugin {
        async isEnabled() {
            throw this.unavailable('This feature is not available in the browser.');
        }
        async speak(options) {
            if (!('speechSynthesis' in window)) {
                throw this.unavailable('Browser does not support the SpeechSynthesis API');
            }
            const utterance = new SpeechSynthesisUtterance(options.value);
            if (options.language) {
                utterance.lang = options.language;
            }
            speechSynthesis.speak(utterance);
        }
    }

    var web = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ScreenReaderWeb: ScreenReaderWeb
    });

    exports.ScreenReader = ScreenReader;

    Object.defineProperty(exports, '__esModule', { value: true });

    return exports;

})({}, capacitorExports);
//# sourceMappingURL=plugin.js.map
